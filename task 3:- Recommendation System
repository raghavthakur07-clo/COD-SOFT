import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import random

class MovieRecommendationSystem:
    def __init__(self):
        # Sample movie database with genres and descriptions
        self.movies = pd.DataFrame({
            'title': [
                'The Shawshank Redemption', 'The Godfather', 'The Dark Knight', 
                'Pulp Fiction', 'Forrest Gump', 'Inception', 'The Matrix',
                'Goodfellas', 'The Silence of the Lambs', 'Star Wars: A New Hope',
                'The Lord of the Rings: The Fellowship of the Ring', 'Fight Club',
                'Parasite', 'Interstellar', 'The Avengers', 'Toy Story',
                'Spirited Away', 'The Lion King', 'Alien', 'Gladiator'
            ],
            'genre': [
                'Drama', 'Crime,Drama', 'Action,Crime,Drama', 
                'Crime,Drama', 'Drama,Romance', 'Action,Adventure,Sci-Fi', 'Action,Sci-Fi',
                'Biography,Crime,Drama', 'Crime,Drama,Thriller', 'Action,Adventure,Fantasy',
                'Adventure,Drama,Fantasy', 'Drama', 'Comedy,Drama,Thriller',
                'Adventure,Drama,Sci-Fi', 'Action,Adventure,Sci-Fi', 'Animation,Adventure,Comedy',
                'Animation,Adventure,Family', 'Animation,Adventure,Drama', 'Horror,Sci-Fi', 'Action,Adventure,Drama'
            ],
            'description': [
                'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.',
                'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.',
                'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.',
                'The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.',
                'The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other historical events unfold through the perspective of an Alabama man with an IQ of 75.',
                'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.',
                'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.',
                'The story of Henry Hill and his life in the mob, covering his relationship with his wife Karen Hill and his mob partners Jimmy Conway and Tommy DeVito.',
                'A young F.B.I. cadet must receive the help of an incarcerated and manipulative cannibal killer to help catch another serial killer.',
                'Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a Wookiee and two droids to save the galaxy from the Empire\'s world-destroying battle station.',
                'A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.',
                'An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.',
                'Greed and class discrimination threaten the newly formed symbiotic relationship between the wealthy Park family and the destitute Kim clan.',
                'A team of explorers travel through a wormhole in space in an attempt to ensure humanity\'s survival.',
                'Earth\'s mightiest heroes must come together and learn to fight as a team if they are going to stop the mischievous Loki and his alien army from enslaving humanity.',
                'A cowboy doll is profoundly threatened and jealous when a new spaceman figure supplants him as top toy in a boy\'s room.',
                'During her family\'s move to the suburbs, a sullen 10-year-old girl wanders into a world ruled by gods, witches, and spirits, and where humans are changed into beasts.',
                'Lion prince Simba and his father are targeted by his bitter uncle, who wants to ascend the throne himself.',
                'The crew of a commercial spacecraft encounter a deadly lifeform after investigating an unknown transmission.',
                'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.'
            ]
        })
        
        # Create a combined feature for content-based filtering
        self.movies['combined_features'] = self.movies['genre'] + ' ' + self.movies['description']
        
        # Initialize TF-IDF Vectorizer
        self.tfidf = TfidfVectorizer(stop_words='english')
        
        # Create TF-IDF matrix
        self.tfidf_matrix = self.tfidf.fit_transform(self.movies['combined_features'])
        
        # Compute cosine similarity matrix
        self.cosine_sim = cosine_similarity(self.tfidf_matrix, self.tfidf_matrix)
        
        # Create mapping from title to index
        self.indices = pd.Series(self.movies.index, index=self.movies['title']).drop_duplicates()
    
    def get_recommendations(self, title, num_recommendations=5):
        # Get the index of the movie that matches the title
        idx = self.indices[title]
        
        # Get the pairwise similarity scores of all movies with that movie
        sim_scores = list(enumerate(self.cosine_sim[idx]))
        
        # Sort the movies based on the similarity scores
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        
        # Get the scores of the top num_recommendations most similar movies
        sim_scores = sim_scores[1:num_recommendations+1]
        
        # Get the movie indices
        movie_indices = [i[0] for i in sim_scores]
        
        # Return the top most similar movies
        return self.movies['title'].iloc[movie_indices].tolist()
    
    def get_random_movies(self, num=5):
        # Get random movies for initial selection
        return random.sample(list(self.movies['title']), num)
    
    def display_movies(self):
        # Display all available movies
        print("Available Movies:")
        for i, title in enumerate(self.movies['title']):
            print(f"{i+1}. {title}")

# Example usage
if __name__ == "__main__":
    # Initialize the recommendation system
    rec_system = MovieRecommendationSystem()
    
    print("Welcome to the Movie Recommendation System!")
    print("=" * 50)
    
    # Display some random movies for the user to choose from
    print("\nHere are some movies you might know:")
    sample_movies = rec_system.get_random_movies(5)
    for i, movie in enumerate(sample_movies):
        print(f"{i+1}. {movie}")
    
    # Get user input
    try:
        choice = int(input("\nEnter the number of a movie you like (1-5): "))
        if 1 <= choice <= 5:
            liked_movie = sample_movies[choice-1]
            print(f"\nYou selected: {liked_movie}")
            
            # Get recommendations
            recommendations = rec_system.get_recommendations(liked_movie, 5)
            
            print(f"\nBecause you liked '{liked_movie}', we recommend:")
            for i, rec in enumerate(recommendations):
                print(f"{i+1}. {rec}")
        else:
            print("Invalid choice. Please select a number between 1 and 5.")
    except ValueError:
        print("Please enter a valid number.")
